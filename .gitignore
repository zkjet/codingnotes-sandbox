node_modules/
.DS_Store
dist/
.env

/build
/src/mongo/db/modules
/.jsdbshell
/.cache
/.dbshell
/*.ninja
/*.ninja.*
/.ninja_deps
/.ninja_log
/perf.data
/perf.data.old
/massif.out.*
venv

*~
*.swp
*.o
*.os
*.obj
*.aps
*.ilk
*.tar.gz
*.suo
*.ncb
*.idb
*.obj
*.opt
*.pch
*.jsh
*.jsall
*.pyc
*.log
*.exe
*.exp
*.lib
*.idb
*.pdb
*.manifest
*.user
*.gch
*.*sdf
*.psess
*.tmp
*.eslintcache
*#
.#*

/src/mongo/*/*Debug*/
/src/mongo/*/*/*Debug*/
/src/mongo/*/*Release*/
/src/mongo/*/*/*Release*/
/src/ipch
/src/mongo/*/ipch
/src/mongo/*/*/ipch
/src/mongo/db/.gdb*
/src/mongo/db/makefile.local
/src/mongo/db/_ReSharper.db
/src/third_party/*/*.cache
/src/third_party/*/*.tlog
/src/third_party/*/*.lastbuildstate
/buildscripts/libdeps/graph_visualizer_web_stack/build
/buildscripts/libdeps/graph_visualizer_web_stack/node_modules
libdeps.graphml
build-metrics.json
config.log
settings.py
log_config.py
/tags
TAGS

# temp dirs
dump
/log
logs
docs/html
docs/latex
docs/doxygen
32bit
scratch
/multiversion_binaries

# binaries
/docgen*
/loadgen*
/mongo*
/mongobridge*
/mongocryptd*
/mongod*
/mongoed*
/mongogrid*
/mongokerberos*
/mongoldap*
/mongoperf*
/mongos*
/mongoshim*
/mongosniff*
/mongotmock*
/mongotrafficreader*
/mqlrun*
/wt*

*.tgz
*.zip
*.tar.gz

#libs
/libmongoclient.*
/libmongotestfiles.*
/libmongoshellfiles.*
/sharedclient
/genny

/emr.jar
*.class

# examples
/firstExample
/secondExample
/whereExample
/bsondemo
/rsExample
/tutorial

#tests
/dbtest
/authTest
/perftest
/clientTest
/httpClientTest
/genny_results

# benchrun files
/benchrun_embedded

# Linters
.mypy_cache

#debian
build-stamp
configure-stamp
debian/mongodb

# OSX files
.DS_Store
._.DS_Store
*.fuse_*

# QtCreator
*.config
*.creator
*.creator.user
*.files
*.includes
*.orig

# Eclipse build artifacts
.cproject
.project
.pydevproject
.externalToolBuilders/
.settings/

# Idea CLion project artifacts
.idea
CMakeLists.txt
!src/third_party/abseil-cpp/**/CMakeLists.txt

# XCode projects
.xcworkspace

# VSCode projects
.vscode/**
!.vscode/linux-virtual-workstation.code-workspace

# Visual Studio projects
.vs/
/x64/

# Windows MSI builder artifacts
*.msi
*.wixobj
*.wixpdb
DriverInclude.wxs

# Gradle
.gradle
src/mongo/embedded/java/build/
src/mongo/embedded/java/aar/build/
src/mongo/embedded/java/jar/build/
local.properties

# clangd language server
.clangd/

compile_commands.json
generated_resmoke_config
selected_tests_config

# Code review tool config
codereview.rc

# Python venvs and virtualenvs
python3-venv
python2-venv

# Generated resmoke configuration file
resmoke.ini

# UndoDB Recordings
*.undo

# Resmoke runtime configuration and trackers.
.resmoke_start_time.yml
.resmoke_mongo_version.yml
.resmoke_mongo_release_values.yml

# libfuzzer artifacts
default.profraw
/corpora
/corpora-merged

# Linter and formatter cache
.mypy_cache/

# RPM build temps
/distsrc.tar
/selinux/tmp
/dst
/rpmbuild
/repo
/rpm/tmp

# antithesis image building assets
/buildscripts/antithesis/base_images/mongo_binaries/dist-test
/buildscripts/antithesis/base_images/workload/src
/buildscripts/antithesis/base_images/workload/mongo
/buildscripts/resmokeconfig/suites/antithesis_*.yml

# generated by gen_all_feature_flag_list.py
all_feature_flags.txt

# generated by clang-tidy buildscripts
clang_tidy_fixes
.clang-tidy

#SCons runtime configuration
scons_env.env

# buildscripts_test by-product
test_success.ninja

# test report generation result
report.json

# suggested resmoke binary location
dist-test/

# node extra stuff (for someone installing eslint)
node_modules/
package-lock.json

/_build
/cover
/deps
/doc
/.fetch
erl_crash.dump
*.ez
*.beam
/config/*.secret.exs
.elixir_ls/

*.gem
*.rbc
/.config
/coverage/
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/

# Used by dotenv library to load environment variables.
# .env

# Ignore Byebug command history file.
.byebug_history

## Specific to RubyMotion:
.dat*
.repl_history
build/
*.bridgesupport
build-iPhoneOS/
build-iPhoneSimulator/

## Specific to RubyMotion (use of CocoaPods):
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# vendor/Pods/

## Documentation cache and generated files:
/.yardoc/
/_yardoc/
/doc/
/rdoc/

## Environment normalization:
/.bundle/
/vendor/bundle
/lib/bundler/man/

# for a library or gem, you might want to ignore these files since the code is
# intended to run in multiple environments; otherwise, check them in:
# Gemfile.lock
# .ruby-version
# .ruby-gemset

# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:
.rvmrc

# Used by RuboCop. Remote config files pulled in from inherit_from directive.
# .rubocop-https?--*

# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work

# C++ related
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

# RUST related 
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# HASKELL LANGUAGE
dist
dist-*
cabal-dev
*.o
*.hi
*.hie
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
.hpc
.hsenv
.cabal-sandbox/
cabal.sandbox.config
*.prof
*.aux
*.hp
*.eventlog
.stack-work/
cabal.project.local
cabal.project.local~
.HTF/
.ghc.environment.*